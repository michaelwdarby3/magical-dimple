version: '3.8'

services:
  app:
    build:
      context: .
    #deploy:
    #  replicas: 3
    #  resources:
    #    limits:
    #      cpus: "0.5"
    #      memory: "512M"
    #  restart_policy:
    #    condition: on-failure
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=review_database
      - DB_USER=data_scientist
      - DB_PASSWORD=default123
    expose:
      - "8000"
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
    #healthcheck:
    #  test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
    #  interval: 10s
    #  timeout: 10s
    #  retries: 5
    #  start_period: 30s

  db:
    image: postgres:13
    container_name: postgres_container
    env_file:
      - .env
    environment:
      POSTGRES_DB: review_database
      POSTGRES_USER: data_scientist
      POSTGRES_PASSWORD: default123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./data/users.csv:/docker-entrypoint-initdb.d/users.csv  # Mount users data
      - ./data/reviews.csv:/docker-entrypoint-initdb.d/reviews.csv  # Mount reviews data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U data_scientist" ]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=default123
    #volumes:
    #  - ./monitoring/grafana:/etc/grafana
    ports:
      - "3000:3000"

  #nginx:
  #  image: nginx:latest
  #  container_name: nginx_load_balancer
  #  ports:
  #    - "8000:80"                # Expose NGINX on the host machine at port 8000
  #  depends_on:
  #    app:
  #      condition: service_healthy
  #  volumes:
  #    - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Mount the custom NGINX config

  dashboard:
    build:
      context: ./dashboard
    ports:
      - "8501:8501"
    depends_on:
      - app
    #environment:
    #  - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

volumes:
  postgres_data:
